<!-- FilmListings.razor -->
@page "/"
@rendermode InteractiveServer
@using CineMagicData.Models
@using CineMagicBlazor.Services
@inject MovieService MovieService
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>
<style>
    /* Reset some default styling */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      display: flex;
      margin: 0;
      font-family: Arial, sans-serif;
    }
    
    /* Sidebar styling */
    .filter-sidebar {
      width: 200px; /* Adjust the width of the sidebar to your preference */
      /*
      background-color: #666363; !* Light grey background *!
      */
      height: 100vh; /* Full height of the viewport */
      padding: 20px; /* Padding around the filter items */
      overflow-y: auto; /* Enable scrolling if content is taller than the screen */
      border-radius: 10px;
      
    }
    
    /* Film listing styling */
    .film-listing {
      flex-grow: 1; /* Take up remaining width */
      padding: 20px;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Adjust minmax values for your preferred card size */
      gap: 20px; /* Space between cards */
    }
    
    /* Film card styling */
    .film-card {
      /*
      border: 1px solid #ddd; !* Light grey border *!
      */
      position: relative;
      overflow: hidden; /* Ensure that content does not overflow */
      border-radius: 5px;;
    }
    
    .film-card img {
      width: 100%; /* Make image fill the card */
      height: auto; /* Keep the aspect ratio */
    }
    
    /* Basic info styling */
    .film-info {
      padding: 10px;
      background: #666363; /* White background */
      color: white;
    }
    
    /* Expand button styling */
    .expand-details {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #007bff; /* Bootstrap primary blue */
      color: white;
      border: none;
      border-radius: 50%;
      width: 30px; /* Size of the button */
      height: 30px;
      text-align: center;
      line-height: 30px; /* Vertically center the plus sign */
      cursor: pointer;
      font-size: 20px;
    }
    
    /* Additional details section, hidden by default */
    .additional-details {
      display: none; /* Hide details by default */
      padding: 10px;
      background: #f8f9fa; /* Light background for the details */
    }
    
    /* When a card is expanded, display the additional details */
    .film-card.expanded .additional-details {
      display: block;
    }
    
    /* Styling for the filter items */
    .filter-sidebar div {
      padding: 10px;
      margin-bottom: 8px; /* Space between filters */
      background-color: #e9ecef; /* Light background for the filter items */
      cursor: pointer;
    }
    
    /* Hover effect for filter items */
    .filter-sidebar div:hover {
      background-color: #dee2e6; /* Slightly darker on hover */
    }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function() {
      const cards = document.querySelectorAll('.film-card');
    
      cards.forEach(card => {
    	card.querySelector('.expand-details').addEventListener('click', function() {
    	  card.classList.toggle('expanded');
    	});
      });
    });

</script>

<div class="filter-sidebar" style="margin-top:100px;height: 1010px;">
    <!-- Filter options go here -->
    <div style="background-color:#666363;  color:white; border-radius: 10px;">
        <label class="form-label" for="search">Search</label>
        <input @bind="searchTerm" class="form-control" name="search" id="search"/>
    </div>
     <div style="background-color:#666363;  color:white; border-radius: 10px;">
            <label class="form-label" for="pegiRating">Age rating</label>
            <select @bind="pegi" class="form-control" id="pegiRating">
                <option value="" selected>all</option>
                <option value="3">3</option>
                <option value="7">7</option>
                <option value="12">12</option>
                <option value="16">16</option>
                <option value="18">18</option>
            </select>
     </div>       
    <div style="background-color:#666363;  color:white; border-radius: 10px;">
        <label class="form-label" for="ageRating">Age rating</label>
        <select @bind="genre" class="form-control" id="ageRating">
            <option value="" selected>all</option>
            <option value="horror">horror</option>
            <option value="romantic">romantic</option>
            <option value="comedy">comedy</option>
        </select>
    </div>
    <div style="background-color:#666363;  color:white; border-radius: 10px;">
        <button @onclick="SearchMovies" class="btn btn-primary">Zoek</button>
    </div>    
</div>

<section style="margin-left: 200px; margin-top: -975px !important; border-radius: 10px; " class="film-listing">
    <!-- Demo film card -->
    @foreach (var movie in _movies)
    {
        <div class="film-card">
            <img src="/img/poster1.jpg" alt="Demo Film Image">
            <div class="film-info">
                <h3>@movie.Title</h3>
                <p>@movie.Description</p>
                <button type="button" @onclick="() => { NavigateTo(movie.Id); }" class="btn btn-primary">Info</button>
            </div>
            @*<button class="expand-details" @onclick="() => ToggleDetails(movie)">+</button>
            <div class="additional-details" style="">
                <p>Director: </p>
                <p>Cast: </p>
            </div>*@
        </div>
    }
</section>

@code {
    List<Movie> _movies = new List<Movie>();

    private string searchTerm = ""; 
    private string pegi = ""; 
    private string genre = ""; 
    
    protected override async Task OnInitializedAsync()
    {
        _movies = (await MovieService.GetAllMovies()).ToList();
    }

    // Method to toggle the details visibility
    void ToggleDetails(Movie movie)
    {
        // movie.IsExpanded = !movie.IsExpanded;
    }

    public void NavigateTo(int id)
    {
        NavigationManager.NavigateTo($"film-details/{id}");
    }

    protected async Task SearchMovies()
    {
        _movies = (await MovieService.SearchMovies(searchTerm, pegi, genre)).ToList();
    }
}
